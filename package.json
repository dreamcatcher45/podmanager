{
  "name": "podmanager",
  "displayName": "Pod Manager",
  "description": "Manage Podman containers, images, volumes, and networks.",
  "version": "3.0.6",
  "publisher": "dreamcatcher45",
  "homepage": "https://pod-manager.pages.dev",
  "repository": {
    "type": "git",
    "url": "https://github.com/dreamcatcher45/podmanager"
  },
  "engines": {
    "vscode": "^1.92.0"
  },
  "categories": [
    "Other"
  ],
  "tags": [
    "Podman",
    "containers",
    "images",
    "volumes",
    "networks",
    "container-management",
    "docker-alternative",
    "devops",
    "infrastructure",
    "virtualization",
    "Linux",
    "open-source",
    "CLI",
    "remote-development",
    "system-administration",
    "podmanager",
    "pod-manager"
  ],
  "icon": "media/icon.png",
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "podmanager-sidebar",
          "title": "Pod Manager",
          "icon": "media/podman-icon.svg"
        }
      ]
    },
    "views": {
      "podmanager-sidebar": [
        {
          "id": "podmanView",
          "name": "Resources"
        },
        {
          "id": "podmanLinks",
          "name": "Quick Links"
        }
      ]
    },
    "commands": [
      {
        "command": "podmanager.restartContainer",
        "title": "Restart Container",
        "icon": "$(refresh)"
      },
      {
        "command": "podmanager.refreshView",
        "title": "Refresh Podman View",
        "icon": "$(refresh)"
      },
      {
        "command": "podmanager.startPodmanMachine",
        "title": "Start Podman Machine",
        "icon": "$(vm-running)"
      },
      {
        "command": "podmanager.deleteContainer",
        "title": "Delete Container",
        "icon": "$(trash)"
      },
      {
        "command": "podmanager.deleteImage",
        "title": "Delete Image",
        "icon": "$(trash)"
      },
      {
        "command": "podmanager.deleteVolume",
        "title": "Delete Volume",
        "icon": "$(trash)"
      },
      {
        "command": "podmanager.deleteNetwork",
        "title": "Delete Network",
        "icon": "$(trash)"
      },
      {
        "command": "podmanager.startContainer",
        "title": "Start Container",
        "icon": "$(play)"
      },
      {
        "command": "podmanager.stopContainer",
        "title": "Stop Container",
        "icon": "$(stop)"
      },
      {
        "command": "podmanager.openInTerminal",
        "title": "Open in Terminal",
        "icon": "$(terminal)"
      },
      {
        "command": "podmanager.composeUp",
        "title": "Compose Up",
        "icon": "$(arrow-up)"
      },
      {
        "command": "podmanager.composeDown",
        "title": "Compose Down",
        "icon": "$(trash)"
      },
      {
        "command": "podmanager.composeStart",
        "title": "Compose Start",
        "icon": "$(play)"
      },
      {
        "command": "podmanager.composeStop",
        "title": "Compose Stop",
        "icon": "$(stop)"
      },
      {
        "command": "podmanager.composeRestart",
        "title": "Compose Restart",
        "icon": "$(refresh)"
      },
      {
        "command": "podmanager.registerComposeFiles",
        "title": "Podman: Register Compose Files",
        "category": "Podman"
      },
      {
        "command": "podmanager.refreshOverview",
        "title": "Refresh Podman Overview",
        "icon": "$(refresh)"
      },
      {
        "command": "podmanager.openToolsMenu",
        "title": "Podman Tools",
        "icon": "$(tools)"
      },
      {
        "command": "podmanager.pruneImages",
        "title": "Prune Dangling Images"
      },
      {
        "command": "podmanager.pruneAllImages",
        "title": "Prune All Unused Images"
      },
      {
        "command": "podmanager.pruneBuilderCache",
        "title": "Prune Builder Cache"
      },
      {
        "command": "podmanager.startPod",
        "title": "Start Pod",
        "icon": "$(play)"
      },
      {
        "command": "podmanager.stopPod",
        "title": "Stop Pod",
        "icon": "$(stop)"
      },
      {
        "command": "podmanager.restartPod",
        "title": "Restart Pod",
        "icon": "$(refresh)"
      },
      {
        "command": "podmanager.deletePod",
        "title": "Delete Pod",
        "icon": "$(trash)"
      },
      {
        "command": "podmanager.createContainer",
        "title": "Create Container",
        "icon": "$(add)"
      },
      {
        "command": "podmanager.createVolume",
        "title": "Podman: Create Volume"
      },
      {
        "command": "podmanager.createPod",
        "title": "Create Pod",
        "icon": "$(add)"
      },
      {
        "command": "podmanager.createNetwork",
        "title": "Podman: Create Network"
      },
      {
        "command": "podmanager.collapseAll",
        "title": "Collapse All",
        "icon": "$(collapse-all)"
      },
      {
        "command": "podmanager.buildImage",
        "title": "Podman: Build Image"
      },
      {
        "command": "podmanager.viewContainerLogs",
        "title": "View Logs",
        "icon": "$(output)"
      },
      {
        "command": "podmanager.pushImage",
        "title": "Push Image",
        "icon": "$(cloud-upload)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "podmanager.collapseAll",
          "when": "view == podmanView",
          "group": "navigation"
        },
        {
          "command": "podmanager.refreshView",
          "when": "view == podmanView",
          "group": "navigation"
        },
        {
          "command": "podmanager.startPodmanMachine",
          "when": "view == podmanView",
          "group": "navigation"
        },
        {
          "command": "podmanager.openToolsMenu",
          "when": "view == podmanView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        { "command": "podmanager.startContainer", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.stopContainer", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.restartContainer", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.deleteContainer", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.openInTerminal", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.viewContainerLogs", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.viewContainerLogs", "when": "view == podmanView && viewItem == container", "group": "inline" },
        { "command": "podmanager.startContainer", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.stopContainer", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.restartContainer", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.deleteContainer", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.openInTerminal", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.viewContainerLogs", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.viewContainerLogs", "when": "view == podmanView && viewItem == compose-container", "group": "inline" },
        { "command": "podmanager.deleteImage", "when": "view == podmanView && viewItem == image", "group": "inline" },
        { "command": "podmanager.pushImage", "when": "view == podmanView && viewItem == image", "group": "inline" },
        { "command": "podmanager.pushImage", "when": "view == podmanView && viewItem == image && config.podmanager.enablePushCommand", "group": "inline" },
        { "command": "podmanager.pushImage", "when": "view == podmanView && viewItem == image && config.podmanager.enablePushCommand == true", "group": "inline" },
        { "command": "podmanager.deleteVolume", "when": "view == podmanView && viewItem == volume", "group": "inline" },
        { "command": "podmanager.deleteNetwork", "when": "view == podmanView && viewItem == network", "group": "inline" },
        { "command": "podmanager.composeUp", "when": "view == podmanView && viewItem == compose-group", "group": "inline" },
        { "command": "podmanager.composeDown", "when": "view == podmanView && viewItem == compose-group", "group": "inline" },
        { "command": "podmanager.composeStart", "when": "view == podmanView && viewItem == compose-group", "group": "inline" },
        { "command": "podmanager.composeStop", "when": "view == podmanView && viewItem == compose-group", "group": "inline" },
        { "command": "podmanager.composeRestart", "when": "view == podmanView && viewItem == compose-group", "group": "inline" },
        { "command": "podmanager.refreshOverview", "when": "view == podmanView && viewItem == overview", "group": "inline" },
        { "command": "podmanager.startPod", "when": "view == podmanView && viewItem == pod", "group": "inline" },
        { "command": "podmanager.stopPod", "when": "view == podmanView && viewItem == pod", "group": "inline" },
        { "command": "podmanager.restartPod", "when": "view == podmanView && viewItem == pod", "group": "inline" },
        { "command": "podmanager.deletePod", "when": "view == podmanView && viewItem == pod", "group": "inline" }
      ],
      "explorer/context": [
        {
          "command": "podmanager.composeUp",
          "when": "resourceExtname == .yml || resourceExtname == .yaml",
          "group": "2_workspace"
        },
        {
          "command": "podmanager.buildImage",
          "when": "resourceFilename == Dockerfile",
          "group": "2_workspace"
        }
      ]
    },
    "configuration": {
      "title": "Podmanager",
      "properties": {
        "podmanager.podmanPath": {
          "type": "string",
          "default": "podman",
          "description": "Custom path to the podman executable"
        },
        "podmanager.composePath": {
          "type": "string",
          "default": "podman-compose",
          "description": "Custom path to the compose executable (e.g., 'podman-compose', 'docker-compose.exe', or leave empty to use 'podman compose')"
        },
        "podmanager.composeCommandStyle": {
          "type": "string",
          "default": "default",
          "enum": [
            "default",
            "podman-compose",
            "podman-space-compose"
          ],
          "description": "Style of compose command execution: 'default' uses podman-compose, 'podman-compose' uses the separate executable, 'podman-space-compose' adds space between podman and compose"
        },
        "podmanager.enablePushCommand": {
          "type": "boolean",
          "default": false,
          "description": "Enable/disable image push command"
        },
        "podmanager.pushDefaultRegistry": {
          "type": "string",
          "default": "",
          "description": "Default registry URL for push command"
        },
        "podmanager.machineName": {
          "type": "string",
          "default": "podman-machine-default",
          "description": "Name of the Podman machine to connect to"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.7",
    "@types/node": "^20.19.0",
    "@types/vscode": "^1.92.0",
    "@typescript-eslint/eslint-plugin": "^7.14.1",
    "@typescript-eslint/parser": "^7.11.0",
    "@vscode/test-cli": "^0.0.9",
    "@vscode/test-electron": "^2.4.0",
    "eslint": "^8.57.0",
    "typescript": "^5.4.5"
  }
}